<%@ page language="java" contentType="text/html; charset=UTF-8"
         pageEncoding="UTF-8" %>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat | BLURB</title>
    <link rel="stylesheet" href="${pageContext.request.contextPath}/css/theme.css"/>
    <link rel="stylesheet" href="${pageContext.request.contextPath}/css/chat.css"/>

    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Anta&display=swap" rel="stylesheet">

    <script defer src="${pageContext.request.contextPath}/javascript/min-theme.js"></script>
    <script defer src="${pageContext.request.contextPath}/javascript/chat.js"></script>

    <script defer>
        window.onload = async () => {
            let chat_rooms = await getChatRooms();
            await displayChatRooms(chat_rooms);
        }

        function startListener() {

            var socket = new SockJS('/capstone');

            var stompClient = Stomp.over(socket);

            let userName = `${sessionScope.userModel.getUsername()}`;

            stompClient.connect({}, function(frame) {

                console.log('Connected: ' + frame);

                console.log("listening to /listening/" + userName);

                stompClient.subscribe('/listening/' + userName, function(message) {

                    var updatesDiv = document.getElementById('updates');

                    updatesDiv.innerHTML += message.body + '<br/>';
                });
            });
        }

        async function sendMessage() {
            const message = document.getElementById('chat-send').value;
            console.log(message);
            const chatroom = document.getElementById('TODO').value;
            console.log(chatroom);

            fetch('/Capstone/send', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'

                },
                body: JSON.stringify({
                    chatRoom: chatroom,
                    message: message
                })
            })
                .then(response => response.text())
                .then(data => console.log(data))
                .catch(error => console.error('ERROR:', error));
        }

        async function getChatRooms() {
            try {
                const response = await fetch('/Capstone/loadAllChatRoomName', {method: 'GET'});
                if (!response.ok) {
                    console.log("ERROR: "+  response.status);
                }
                const json = await response.json();
                let chat_rooms = [];
                console.log(json);

                for (let i = 0; i < json.length; i++) {
                    let curChatRoom = [];
                    curChatRoom.push(Object.values(json)[0][0]); //
                    curChatRoom.push(Object.values(json)[0][1]); //
                    let date = Object.values(json)[0][4]
                    curChatRoom.push(new Date(date).getDay() + "/" + new Date(date).getMonth()); //date
                    chat_rooms.push(curChatRoom);
                }
<<<<<<< HEAD
=======

                startListener();

>>>>>>> penn-brandon/W_9
                return chat_rooms;
            } catch (error) {
                console.error(error.message);
            }
        }

        async function displayChatRooms(chat_rooms) {
            const chat_room_div = document.getElementById("channels-list");

            // Removes all extra p tags from chat room list
            while (chat_room_div.firstChild) {
                chat_room_div.removeChild(chat_room_div.lastChild);
            }

            if (chat_rooms.length > 0) {
                for (let i = 0; i < chat_rooms.length; i++) {
                    let chat_room_name = document.createElement('span');
                    chat_room_name.textContent = chat_rooms[i][0]; //NAME

                    let lastModifiedDate = document.createElement('span');
                    lastModifiedDate.textContent = chat_rooms[i][2]; //DATE

                    let new_chat = document.createElement('p');
                    new_chat.appendChild(chat_room_name);
                    new_chat.appendChild(lastModifiedDate);


                    // Loads new Messages when you click the channel name
                    new_chat.addEventListener('click', async () => {
                        let messages = await getMessages(chat_rooms[i][0]);
                        displayMessages(messages);
                    });

                    chat_room_div.appendChild(new_chat);
                }
            } else {
                let chat_room_name = document.createElement('span');
                chat_room_name.textContent = "None";

                let chat_room_id = document.createElement('span');
                chat_room_id.textContent = "None";

                let lastModifiedDate = document.createElement('span');
                lastModifiedDate.textContent = "None";

                let new_chat = document.createElement('p');
                new_chat.appendChild(chat_room_name);
                new_chat.appendChild(chat_room_id);
                new_chat.appendChild(lastModifiedDate);

                chat_room_div.appendChild(new_chat);
            }

        }

        async function getMessages(chatroom){
            const current_chat = document.getElementById("current-chat");

            try {
                const response = await fetch('/Capstone/loadMessage', {method: 'GET', headers:{"Content-Type":"application/json","chatRoomName":chatroom.toString()}});
                if (!response.ok) {
                    console.log("ERROR: "+  response.status);
                }
                const json = await response.json();
                console.log(json);

                let messages = [];

                for (let i = 0; i < json.length; i++) {
                    let curMessage = [];
                    curMessage += json[i].timestamp;
                    curMessage += json[i].username;
                    curMessage += json[i].data;
                    messages += curMessage;
                }
                return messages;
            } catch (error) {
                console.error(error.message);
            }
        }

        function displayMessages(messages){
            const current_chat = document.getElementById("current-chat");

            // Removes all extra p tags from channel list
            while (current_chat.firstChild) {
                current_chat.removeChild(current_chat.lastChild);
            }

            if (messages.length > 0) {
                for (let i = 0; i < messages.length; i++) {
                    let chat_room_name = document.createElement('span');
                    chat_room_name.textContent = messages[i][0];

                    let chat_room_id = document.createElement('span');
                    chat_room_id.textContent = messages[i][1];

                    let lastModifiedDate = document.createElement('span');
                    lastModifiedDate.textContent = messages[i][2];

                    let new_chat = document.createElement('p');
                    new_chat.appendChild(chat_room_name);
                    new_chat.appendChild(chat_room_id);
                    new_chat.appendChild(lastModifiedDate);

                    current_chat.appendChild(new_chat);
                }
            } else {
                let chat_room_name = document.createElement('span');
                chat_room_name.textContent = "None";

                let chat_room_id = document.createElement('span');
                chat_room_id.textContent = "None";

                let lastModifiedDate = document.createElement('span');
                lastModifiedDate.textContent = "None";

                let new_chat = document.createElement('p');
                new_chat.appendChild(chat_room_name);
                new_chat.appendChild(chat_room_id);
                new_chat.appendChild(lastModifiedDate);

                current_chat.appendChild(new_chat);
            }

        }

    </script>

</head>

<body>
    <nav>
        <div class="nav-content">
            <div class="nav-img">
                <img src="${pageContext.request.contextPath}/Capstone/images/logo.svg" alt="Logo"/>
                <span class="nav-logo">BLURB</span>
            </div>
            <div class="profile-div" id="profile-div">
                <button class="profile" id="profile" onclick="profile_click(`${pageContext.request.contextPath}`)">
                    <img src="${pageContext.request.contextPath}/Capstone/images/user.svg" alt="Profile"/>
                </button>
            </div>
        </div>
    </nav>

    <div class="chats">
        <p>Channels</p>
        <div class="channels-list" id="channels-list">
            <p>Default Channel</p>
        </div>
    </div>


    <div class="current-chat" id="current-chat">
        <!-- This is default example and not actual chat -->
        <div class="chat-row">
            <div class="chat-message">
                <p class="chat-timestamp">Date: 09/06/2024</p>
                <p class="chat-sender">Username : Dann123</p>
                <p class="chat-message-data"> What's up dude</p>
            </div>
        </div>
        <div class="chat-row">
            <div class="chat-message-response">
                <p class="chat-timestamp-response">Date: 09/06/2024</p>
                <p class="chat-sender-response">Username : Dann123</p>
                <br>
                <p class="chat-message-data-response"> Whats up dude</p>
            </div>
        </div>
        <!-- End of Example-->
        <label>
            <textarea class="chat-send" id="chat-send"></textarea>
        </label>
        <button id="send-button" onclick="sendMessage()">
            <img src="${pageContext.request.contextPath}/images/send.svg" class="chat-send-icon" alt="Send">
        </button>

    </div>

    <footer>
        <div class="footer-div">
            <p class="footer-copyright">
                Copyright of Cool Dudes &copy;2024. All Rights Reserved.
            </p>
        </div>
    </footer>
</body>

</html>